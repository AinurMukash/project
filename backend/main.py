from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
import joblib
import numpy as np
import re
import os

app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
BASE_DIR = os.path.dirname(__file__)
model = joblib.load(os.path.join(BASE_DIR, "models", "DecisionTreeClassifier_model.pkl"))
vectorizer = joblib.load(os.path.join(BASE_DIR, "models", "tfidf_vectorizer.pkl"))

class TextIn(BaseModel):
    text: str

# –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
@app.post("/predict")
def predict(data: TextIn):
    text = data.text
    text = re.sub(r'[^\w\s]', '', text.lower())
    vector = vectorizer.transform([text])
    prediction = model.predict(vector)
    return {"prediction": int(prediction[0])}

# –û—Ç–¥–∞—ë–º frontend (React) –∏–∑ dist –∏–ª–∏ build
frontend_path = os.path.join(BASE_DIR, "frontend", "dist")  # –µ—Å–ª–∏ Vite
# frontend_path = os.path.join(BASE_DIR, "frontend", "build")  # –µ—Å–ª–∏ CRA

app.mount("/static", StaticFiles(directory=frontend_path), name="static")

@app.get("/")
async def serve_frontend():
    return FileResponse(os.path.join(frontend_path, "index.html"))

# üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Railway (uvicorn)
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run("main:app", host="0.0.0.0", port=port)
